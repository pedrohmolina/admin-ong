--   --------------------------------------------------
--   Generated by Enterprise Architect Version 7.1.833
--   Created On : Lunes, 22 Noviembre, 2010 
--   DBMS       : MySql 
--   -------------------------------------------------- 






--  Create Tables 
CREATE TABLE presupuesto
(
	id INT NOT NULL AUTO_INCREMENT,
	idActividad INT NOT NULL,
	idRubro INT NOT NULL,
	monto DECIMAL(10,2) NOT NULL,
	PRIMARY KEY (id),
	KEY (idActividad),
	KEY (idRubro)
) 
;


CREATE TABLE gasto
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idProyecto INT COMMENT 'Proyecto al cual corresponde la Actividad para la cual se registra el gasto',
	idActividad INT COMMENT 'Actividad a la cual se registra el gasto',
	fecha DATE NOT NULL COMMENT 'Fecha de registración de gasto',
	idRubro INT NOT NULL COMMENT 'Rubro al cual pertenece el gasto',
	idOrigen INT NOT NULL COMMENT 'Origen del gasto',
	idProveedor INT COMMENT 'Proveedor vinculado al gasto',
	idTipoComprobante INT COMMENT 'Tipo de comprobante',
	numeroComprobante VARCHAR(50) COMMENT 'Identificador de comprobante',
	paquete VARCHAR(50) COMMENT 'Identificador de paquete',
	importe DECIMAL(10,2) NOT NULL COMMENT 'Importe del gasto',
	idPersona INT NOT NULL COMMENT 'Persona que imputa el gasto',
	idTipoGasto INT NOT NULL COMMENT 'Esto no recuerdo que es',
	observaciones TEXT COMMENT 'Observaciones del gasto',
	referencia VARCHAR(255) COMMENT 'Referencia',
	confirmado BOOL NOT NULL DEFAULT false COMMENT 'Indica que el gasto fue confirmado por el administrador',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
        PRIMARY KEY (id),
	UNIQUE UQ_gasto_id(id),
	KEY (idActividad),
	KEY (idOrigen),
	KEY (idPersona),
	KEY (idProveedor),
	KEY (idProyecto),
	KEY (idRubro),
	KEY (idTipoComprobante),
	KEY (idTipoGasto)
) 
;


CREATE TABLE asignacion
(
	id INT NOT NULL AUTO_INCREMENT,
	idTipoAsignacion INT NOT NULL,
	idPersona INT NOT NULL,
	idActividad INT NOT NULL,
	cantidad NUMERIC(10) NOT NULL,
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_asignacion_id(id),
	UNIQUE UQ_asignacion_tupla(idActividad, idPersona, idTipoAsignacion),
	KEY (idActividad),
	KEY (idPersona),
	KEY (idTipoAsignacion)
) 
;


CREATE TABLE actividad
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idMeta INT NOT NULL,
	idFinanciador INT NOT NULL,
	idEstadoActividad INT NOT NULL,
	nombre VARCHAR(255) COMMENT 'Nombre de la Actividad',
	observaciones TEXT COMMENT 'Observaciones generales de la Actividad',
	fechaInicio DATE COMMENT 'Fecha que inicia la Actividad',
	fechaFin DATE COMMENT 'Fecha que termina la Actividad',
	ponderacion DECIMAL(3) NOT NULL COMMENT 'Peso arbitrariamente asignado',
	completitud DECIMAL(3) NOT NULL COMMENT 'Porcentaje en el que se ha completado la actividad',
	presupuesto DECIMAL(10,2) COMMENT 'Presupuesto asignado a esta Actividad',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_actividad_id(id),
	UNIQUE UQ_actividad_nombre(nombre),
	KEY (idFinanciador),
	KEY (idMeta),
	KEY (idEstadoActividad)
) 
;


CREATE TABLE meta
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre de la Meta',
	descripcion TEXT COMMENT 'Descripción breve de la Meta',
	ponderacion DECIMAL(3) NOT NULL COMMENT 'Peso relativo de la Meta en el Objetivo Especifico',
	idObjetivoEspecifico INT NOT NULL COMMENT 'Objetivo Específico del que depende esta Meta',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_meta_id(id),
	KEY (idObjetivoEspecifico)
) 
;


CREATE TABLE objetivoEspecifico
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre del Objetivo Especifico ',
	descripcion TEXT COMMENT 'Descripción breve del Objetivo Especifico',
	ponderacion DECIMAL(3) NOT NULL COMMENT 'Peso relativo del Objetivo Especifico en el Objetivo General',
	idObjetivoGeneral INT NOT NULL COMMENT 'Objetivo General del que depende este Objetivo Especifico',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_objetivoEspecifico_id(id),
	KEY (idObjetivoGeneral)
) 
;


CREATE TABLE usuario
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idPersona INT NOT NULL COMMENT 'Referencia a la persona',
	username VARCHAR(50) NOT NULL COMMENT 'Nombre de usuario con el que se accedera al sistema',
	password VARCHAR(50) NOT NULL COMMENT 'Contraseña',
	idPerfil INT NOT NULL COMMENT 'Perfil del Usuario',
	bloqueado BOOL NOT NULL COMMENT 'Señal para manejo de bloqueos',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	KEY (idPersona),
	KEY (idPersona)
) 
;


CREATE TABLE tipoDocumento
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id)
) 
;


CREATE TABLE proyectoAreaTematica
(
	idProyecto INT NOT NULL AUTO_INCREMENT,
	idAreaTematica INT NOT NULL,
	PRIMARY KEY (idProyecto, idAreaTematica),
	KEY (idAreaTematica),
	KEY (idProyecto)
) 
;


CREATE TABLE objetivoGeneral
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre del Objetivo General',
	descripcion TEXT COMMENT 'Descripción breve del Objetivo General',
	ponderacion DECIMAL(3) NOT NULL COMMENT 'Peso relativo del Objetivo General en el proyecto',
	idProyecto INT NOT NULL COMMENT 'Proyecto que depende El Objetivo General',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_objetivoGeneral_id(id),
	KEY (idProyecto)
) 
;


CREATE TABLE coordinador
(
	idProyecto INT NOT NULL,
	idPersona INT NOT NULL,
	PRIMARY KEY (idProyecto, idPersona),
	KEY (idPersona),
	KEY (idProyecto)
) 
;


CREATE TABLE rolAcceso
(
	idRol INT NOT NULL,
	idAcceso INT NOT NULL,
	PRIMARY KEY (idRol, idAcceso),
	KEY (idAcceso),
	KEY (idRol)
) 
;


CREATE TABLE parametro
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	nombre VARCHAR(50) NOT NULL COMMENT 'Nombre del Parametro',
	valor VARCHAR(255) NOT NULL COMMENT 'Valor del Parametro',
	descripcion VARCHAR(255) NOT NULL COMMENT 'Descripcion del Parametro',
	PRIMARY KEY (id),
	UNIQUE UQ_parametro_id(id),
	UNIQUE UQ_parametro_nombre(nombre)
) 
;


CREATE TABLE proyecto
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idEstadoProyecto INT NOT NULL COMMENT 'Estado del Proyecto',
	idTipoAgrupamiento INT NOT NULL COMMENT 'Agrupamiento de los gastos del Proyecto',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre del Proyecto',
	descripcion TEXT COMMENT 'Descripción breve del Proyecto',
	fechaInicio DATE COMMENT 'Fecha que inicia el Proyecto',
	fechaFin DATE COMMENT 'Fecha que termina el Proyecto',
	ubicacion VARCHAR(255) COMMENT 'Ubicación geográfica donde se desarrollara el Proyecto',
	responsable INT NOT NULL COMMENT 'La Persona responsable del Proyecto',
	beneficiariosDirectos TEXT COMMENT 'Descripción de los Beneficiarios directos del Proyecto.',
	beneficiariosIndirectos TEXT COMMENT 'Descripción de los Beneficiarios indirectos del Proyecto',
	financiador INT,
	resumen TEXT COMMENT 'Resumen del Proyecto',
	adjunto BLOB COMMENT 'Resumen del Proyecto',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_proyecto_id(id),
	UNIQUE UQ_proyecto_nombre(nombre),
	KEY (idEstadoProyecto),
	KEY (idTipoAgrupamiento),
	KEY (financiador),
	KEY (responsable)
) 
;


CREATE TABLE proveedor
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idTipoProveedor INT NOT NULL COMMENT 'Tipo del Proveedor',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre, Razón Social o Institución del Proveedor',
	cuit VARCHAR(20) COMMENT 'Número de CUIT o CUIL del Proveedor',
	cbu VARCHAR(50) COMMENT 'Número de Código Bancario Único del Proveedor',
	direccion VARCHAR(255) COMMENT 'Dirección del Proveedor',
	telefono VARCHAR(20) COMMENT 'Teléfono del Proveedor',
	contacto VARCHAR(50) COMMENT 'Contacto del Proveedor',
	celular VARCHAR(20) COMMENT 'Celular del Proveedor',
	email VARCHAR(50) COMMENT 'Email del Proveedor',
	observaciones VARCHAR(255) COMMENT 'Observaciones del Proveedor',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_proveedor_nombre(nombre),
	UNIQUE UQ_proveedor_id(id),
	KEY (idTipoProveedor)
) 
;


CREATE TABLE persona
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	apellido VARCHAR(255) NOT NULL COMMENT 'Apellido de la Persona',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre de la Persona',
	segundoNombre VARCHAR(255) COMMENT 'Segundo Nombre de la Persona',
	idTipoDocumento INT NOT NULL COMMENT 'Tipo de documento de la persona',
	numeroDocumento NUMERIC(10) NOT NULL COMMENT 'Número de Documento de la Persona.',
	cuit VARCHAR(20) NOT NULL COMMENT 'Número de CUIT o CUIL de la Persona',
	cbu VARCHAR(50) NOT NULL COMMENT 'Número de Código Bancario Único de la Persona',
	nacionalidad VARCHAR(255) NOT NULL COMMENT 'Nacionalidad de la Persona',
	fechaNacimiento DATE COMMENT 'Fecha de Nacimiento de la Persona',
	profesion VARCHAR(255) NOT NULL COMMENT 'Profesión de la Persona',
	direccion VARCHAR(255) NOT NULL COMMENT 'Dirección de la Persona',
	telefono VARCHAR(20) NOT NULL COMMENT 'Teléfono de la Persona',
	celular VARCHAR(20) COMMENT 'Celular de la Persona',
	email VARCHAR(255) COMMENT 'Email de la Persona',
	funcion VARCHAR(255) NOT NULL COMMENT 'Función en la Organización de la Persona',
	idRelacionContractual INT NOT NULL,
	idFormaPago INT NOT NULL,
	idPersonaFactura INT COMMENT 'Persona en nombre de la cual se va a facturar',
	observaciones VARCHAR(255) COMMENT 'Observaciones de la Persona a crear',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_persona_id(id),
	KEY (idFormaPago),
	KEY (idPersonaFactura),
	KEY (idRelacionContractual)
) 
;


CREATE TABLE perfilRol
(
	idPerfil INT NOT NULL,
	idRol INT NOT NULL,
	PRIMARY KEY (idPerfil, idRol),
	KEY (idPerfil),
	KEY (idRol)
) 
;


CREATE TABLE ingreso
(
	id INT NOT NULL AUTO_INCREMENT,
	idTipoIngreso INT NOT NULL COMMENT 'Tipificación del Ingreso',
	monto DECIMAL(10,2) NOT NULL COMMENT 'Monto recibido',
	fecha DATE NOT NULL COMMENT 'Fecha en la que tuvo lugar el Ingreso',
	descripcion TEXT COMMENT 'Descripción del ingreso',
	idFinanciador INT COMMENT 'Financiador (solo valido si el Ingreso es de tipo "Financiacion")',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	KEY (idFinanciador),
	KEY (idTipoIngreso)
) 
;


CREATE TABLE financiador
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idTipoFinanciador INT NOT NULL COMMENT 'Tipo del Financiador',
	nombre VARCHAR(255) NOT NULL COMMENT 'Nombre, Razón Social o Institución del Financiador a crear',
	cuit VARCHAR(20) COMMENT 'Número de CUIT o CUIL del Financiador a crear.',
	cbu VARCHAR(50) COMMENT 'Número de Código Bancario Único del Financiador a crear',
	direccion VARCHAR(255) NOT NULL COMMENT 'Dirección del Financiador',
	telefono VARCHAR(20) NOT NULL COMMENT 'Teléfono del Financiador',
	contacto VARCHAR(255) COMMENT 'Contacto del Financiador',
	celular VARCHAR(20) COMMENT 'Celular del Financiador',
	email VARCHAR(50) COMMENT 'Email del Financiador',
	idEstadoFinanciador INT NOT NULL COMMENT 'El estado en el sistema del Financiador',
	observaciones VARCHAR(50) COMMENT 'Observaciones del Financiador',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_financiador_nombre(nombre),
	UNIQUE UQ_financiador_id(id),
	KEY (idTipoFinanciador)
) 
;


CREATE TABLE acceso
(
	id INT NOT NULL AUTO_INCREMENT,
	idRecurso INT NOT NULL,
	idAccion INT NOT NULL,
	PRIMARY KEY (idRecurso, idAccion),
	KEY (id),
	UNIQUE UQ_rec_accion(idRecurso, idAccion)
) 
;


CREATE TABLE tipoProveedor
(
	id INT NOT NULL AUTO_INCREMENT,
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descrpcion del Tipo de Proveedor',
	PRIMARY KEY (id),
	UNIQUE UQ_tipoProveedor_descripcion(descripcion),
	UNIQUE UQ_tipoProveedor_id(id)
) 
;


CREATE TABLE tipoIngreso
(
	id INT NOT NULL AUTO_INCREMENT,
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id)
) 
;


CREATE TABLE tipoGasto
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_tipoGasto_descripcion(descripcion),
	UNIQUE UQ_tipoGasto_id(id)
) 
;


CREATE TABLE tipoFinanciador
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del Tipo de FInanciador',
	PRIMARY KEY (id),
	UNIQUE UQ_tipoFinanciador_descripcion(descripcion)
) 
;


CREATE TABLE tipoComprobante
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_tipoComprobante_descripcion(descripcion),
	UNIQUE UQ_tipoComprobante_id(id)
) 
;


CREATE TABLE tipoAsignacion
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_tipoAsignacion_descripcion(descripcion),
	UNIQUE UQ_tipoAsignacion_id(id)
) 
;


CREATE TABLE tipoAgrupamiento
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_tipoAgrupamiento_descripcion(descripcion),
	UNIQUE UQ_tipoAgrupamiento_id(id)
) 
;


CREATE TABLE rubro
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idRubroPadre INT,
	nombre VARCHAR(16) NOT NULL,
	descripcion VARCHAR(255) NOT NULL,
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_rubro_id(id),
	KEY (idRubroPadre)
) 
;


CREATE TABLE rol
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	nombre VARCHAR(255) NOT NULL COMMENT 'Identificador único del Rol en el sistema',
	descripcion VARCHAR(255) NOT NULL COMMENT 'Descripcion del Rol',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_rol_nombre(nombre)
) 
;


CREATE TABLE relacionContractual
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	nombre VARCHAR(16) NOT NULL COMMENT 'Identificador único de la Relación Contractual en el sistema',
	descripcion VARCHAR(255) NOT NULL COMMENT 'Descripción de la Relación Contractual',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_relacionContractual_nombre(nombre),
	UNIQUE UQ_relacionContractual_descripcion(descripcion),
	UNIQUE UQ_tipoContratacion_id(id)
) 
;


CREATE TABLE recurso
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del Recurso',
	PRIMARY KEY (id)
) 
;


CREATE TABLE perfil
(
	id INT NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(16) NOT NULL COMMENT 'Identificador único del Perfil en el sistema',
	descripcion VARCHAR(255) NOT NULL COMMENT 'Descripcion del Perfil',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_perfil_nombre(nombre)
) 
;


CREATE TABLE origen
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_origen_descripcion(descripcion),
	UNIQUE UQ_origen_id(id)
) 
;


CREATE TABLE formaPago
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_formaPago_descripcion(descripcion),
	UNIQUE UQ_formaPago_id(id)
) 
;



CREATE TABLE estadoProyecto
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idEstadoAnterior INT,
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del Estado del Proyecto',
	PRIMARY KEY (id),
	UNIQUE UQ_estadoProyecto_descripcion(descripcion),
	UNIQUE UQ_estadoProyecto_id(id),
	KEY (idEstadoAnterior)
) 
;


CREATE TABLE estadoActividad
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del Estado del Proyecto',
	PRIMARY KEY (id),
	UNIQUE UQ_estadoActividad_descripcion(descripcion),
	UNIQUE UQ_estadoActividad_id(id)
) 
;


CREATE TABLE proximoEstadoActividad
(
	idEstadoActividad INT NOT NULL,
	idProximoEstadoActividad INT NOT NULL,
        KEY (idEstadoActividad),
        KEY (idProximoEstadoActividad),
        CONSTRAINT FK_proximoEstadoActividad_estadoActividad FOREIGN KEY (idProximoEstadoActividad) REFERENCES estadoActividad(id),
        CONSTRAINT FK_proximoEstadoActividad_proximoEstadoActividad FOREIGN KEY (idEstadoActividad) REFERENCES estadoActividad(id)
)
;


CREATE TABLE estadoFinanciador
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del Estado de Financiador',
	PRIMARY KEY (id),
	UNIQUE UQ_estadoFinanciador_descripcion(descripcion),
	UNIQUE UQ_estadoFinanciador_id(id)
) 
;


CREATE TABLE areaTematica
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE UQ_areaTematica_id(id)
) 
;


CREATE TABLE accion
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion de la Accion',
	PRIMARY KEY (id)
) 
;





--  Create Foreign Key Constraints 
ALTER TABLE presupuesto ADD CONSTRAINT FK_presupuesto_actividad 
	FOREIGN KEY (idActividad) REFERENCES actividad (id)
;

ALTER TABLE presupuesto ADD CONSTRAINT FK_presupuesto_rubro 
	FOREIGN KEY (idRubro) REFERENCES rubro (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_actividad 
	FOREIGN KEY (idActividad) REFERENCES actividad (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_origen 
	FOREIGN KEY (idOrigen) REFERENCES origen (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_persona 
	FOREIGN KEY (idPersona) REFERENCES persona (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_proveedor 
	FOREIGN KEY (idProveedor) REFERENCES proveedor (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_proyecto 
	FOREIGN KEY (idProyecto) REFERENCES proyecto (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_rubro 
	FOREIGN KEY (idRubro) REFERENCES rubro (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_tipoComprobante 
	FOREIGN KEY (idTipoComprobante) REFERENCES tipoComprobante (id)
;

ALTER TABLE gasto ADD CONSTRAINT FK_gasto_tipoGasto 
	FOREIGN KEY (idTipoGasto) REFERENCES tipoGasto (id)
;

ALTER TABLE asignacion ADD CONSTRAINT FK_asignacion_actividad 
	FOREIGN KEY (idActividad) REFERENCES actividad (id)
;

ALTER TABLE asignacion ADD CONSTRAINT FK_asignacion_persona 
	FOREIGN KEY (idPersona) REFERENCES persona (id)
;

ALTER TABLE asignacion ADD CONSTRAINT FK_asignacion_tipoAsignacion 
	FOREIGN KEY (idTipoAsignacion) REFERENCES tipoAsignacion (id)
;

ALTER TABLE actividad ADD CONSTRAINT FK_actividad_financiador 
	FOREIGN KEY (idFinanciador) REFERENCES financiador (id)
;

ALTER TABLE actividad ADD CONSTRAINT FK_actividad_meta 
	FOREIGN KEY (idMeta) REFERENCES meta (id)
;

ALTER TABLE meta ADD CONSTRAINT FK_meta_objetivoEspecifico 
	FOREIGN KEY (idObjetivoEspecifico) REFERENCES objetivoEspecifico (id)
;

ALTER TABLE objetivoEspecifico ADD CONSTRAINT FK_objetivoEspecifico_objetivoGeneral 
	FOREIGN KEY (idObjetivoGeneral) REFERENCES objetivoGeneral (id)
;

ALTER TABLE usuario ADD CONSTRAINT FK_usuario_perfil 
	FOREIGN KEY (idPerfil) REFERENCES perfil (id)
;

ALTER TABLE usuario ADD CONSTRAINT FK_usuario_persona 
	FOREIGN KEY (idPersona) REFERENCES persona (id)
;

ALTER TABLE proyectoAreaTematica ADD CONSTRAINT FK_proyectoAreaTematica_areaTematica 
	FOREIGN KEY (idAreaTematica) REFERENCES areaTematica (id)
;

ALTER TABLE proyectoAreaTematica ADD CONSTRAINT FK_proyectoAreaTematica_proyecto 
	FOREIGN KEY (idProyecto) REFERENCES proyecto (id)
;

ALTER TABLE objetivoGeneral ADD CONSTRAINT FK_objetivoGeneral_proyecto 
	FOREIGN KEY (idProyecto) REFERENCES proyecto (id)
;

ALTER TABLE coordinador ADD CONSTRAINT FK_coordinador_persona 
	FOREIGN KEY (idPersona) REFERENCES persona (id)
;

ALTER TABLE coordinador ADD CONSTRAINT FK_coordinador_proyecto 
	FOREIGN KEY (idProyecto) REFERENCES proyecto (id)
;

ALTER TABLE rolAcceso ADD CONSTRAINT FK_rolAcceso_acceso 
	FOREIGN KEY (idAcceso) REFERENCES acceso (id)
;

ALTER TABLE rolAcceso ADD CONSTRAINT FK_rolAcceso_rol 
	FOREIGN KEY (idRol) REFERENCES rol (id)
;

ALTER TABLE proyecto ADD CONSTRAINT FK_proyecto_estadoProyecto 
	FOREIGN KEY (idEstadoProyecto) REFERENCES estadoProyecto (id)
;

ALTER TABLE proyecto ADD CONSTRAINT FK_proyecto_tipoAgrupamiento 
	FOREIGN KEY (idTipoAgrupamiento) REFERENCES tipoAgrupamiento (id)
;

ALTER TABLE proyecto ADD CONSTRAINT FK_proyecto_financiador 
	FOREIGN KEY (financiador) REFERENCES financiador (id)
;

ALTER TABLE proyecto ADD CONSTRAINT FK_proyecto_persona 
	FOREIGN KEY (responsable) REFERENCES persona (id)
;

ALTER TABLE proveedor ADD CONSTRAINT FK_proveedor_tipoProveedor 
	FOREIGN KEY (idTipoProveedor) REFERENCES tipoProveedor (id)
;

ALTER TABLE persona ADD CONSTRAINT FK_persona_formaPago 
	FOREIGN KEY (idFormaPago) REFERENCES formaPago (id)
;

ALTER TABLE persona ADD CONSTRAINT FK_persona_persona 
	FOREIGN KEY (idPersonaFactura) REFERENCES persona (id)
;

ALTER TABLE persona ADD CONSTRAINT FK_persona_relacionContractual 
	FOREIGN KEY (idRelacionContractual) REFERENCES relacionContractual (id)
;

ALTER TABLE perfilRol ADD CONSTRAINT FK_perfilRol_perfil 
	FOREIGN KEY (idPerfil) REFERENCES perfil (id)
;

ALTER TABLE perfilRol ADD CONSTRAINT FK_perfilRol_rol 
	FOREIGN KEY (idRol) REFERENCES rol (id)
;

ALTER TABLE ingreso ADD CONSTRAINT FK_Ingreso_financiador 
	FOREIGN KEY (idFinanciador) REFERENCES financiador (id)
;

ALTER TABLE ingreso ADD CONSTRAINT FK_Ingreso_TipoIngreso 
	FOREIGN KEY (idTipoIngreso) REFERENCES tipoIngreso (id)
;

ALTER TABLE financiador ADD CONSTRAINT FK_financiador_tipoFinanciador 
	FOREIGN KEY (idTipoFinanciador) REFERENCES tipoFinanciador (id)
;

ALTER TABLE acceso ADD CONSTRAINT FK_recursoAccion_accion 
	FOREIGN KEY (idAccion) REFERENCES accion (id)
;

ALTER TABLE acceso ADD CONSTRAINT FK_recursoAccion_recurso 
	FOREIGN KEY (idRecurso) REFERENCES recurso (id)
;

ALTER TABLE rubro ADD CONSTRAINT FK_rubro_rubro 
	FOREIGN KEY (idRubroPadre) REFERENCES rubro (id)
;

ALTER TABLE estadoProyecto ADD CONSTRAINT FK_estadoProyecto_estadoProyecto 
	FOREIGN KEY (idEstadoAnterior) REFERENCES estadoProyecto (id)
;

ALTER TABLE actividad ADD CONSTRAINT FK_actividad_estadoActividad 
	FOREIGN KEY (idEstadoActividad) REFERENCES estadoActividad (id)
;


-- Seguridad por valor

CREATE TABLE entidad
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion de la entidad',
	nombreEntidad VARCHAR(50) NOT NULL COMMENT 'Nombre de la entidad usado por el motor de reglas',
	PRIMARY KEY (id),
	UNIQUE UQ_entidad_descripcion(descripcion),
	UNIQUE UQ_entidad_id(id)
) 
;

CREATE TABLE entidadReferenciada
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idEntidad INT NOT NULL COMMENT 'Entidad que contiene la referencia',
	idEntidadReferenciada INT NOT NULL COMMENT 'Entidad referenciada',
	nombreEntidad VARCHAR(50) NOT NULL COMMENT 'Nombre del campo que contiene la referencia',
	PRIMARY KEY (idEntidad, idEntidadReferenciada),
	UNIQUE UQ_entidadReferenciada_dupla(idEntidad, idEntidadReferenciada),
	UNIQUE UQ_entidadReferenciada_id(id)
) 
;

CREATE TABLE tipoAtributo
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del tipo de atributo',
	PRIMARY KEY (id),
	UNIQUE UQ_tipoAtributo_descripcion(descripcion),
	UNIQUE UQ_tipoAtributo_id(id)
) 
;

CREATE TABLE atributo
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idEntidad INT COMMENT 'Entidad del atributo',
	idTipoAtributo INT COMMENT 'Tipo del atributo',
	nombreAtributo VARCHAR(50) NOT NULL COMMENT 'Nombre del atributo de la entidad usado por el motor de reglas',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del atributo',
	PRIMARY KEY (id),
	UNIQUE UQ_atributo_id(id)
) 
;

CREATE TABLE operador
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
	idTipoAtributo INT COMMENT 'Tipo de atributo al que pertenece',
	descripcion VARCHAR(50) NOT NULL COMMENT 'Descripcion del operador',
	PRIMARY KEY (id),
	UNIQUE UQ_operador_id(id)
) 
;

CREATE TABLE regla
(
	id INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key',
 	idEntidad INT COMMENT 'Entidad a la que aplica la regla',
	idAtributo INT COMMENT 'Atributo al que aplica la regla',
	idOperador INT COMMENT 'Operador de la regla',
	idUsuario INT COMMENT 'Usuario al que aplica la serie',
	valor VARCHAR(255) NOT NULL COMMENT 'Valor a asignar a la regla',
	activo BOOL NOT NULL COMMENT 'Señal para manejo de baja logica',
	PRIMARY KEY (id),
	UNIQUE UQ_regla_id(id)
) 
;

ALTER TABLE atributo ADD CONSTRAINT FK_atributo_entidad
	FOREIGN KEY (idEntidad) REFERENCES entidad (id)
;

ALTER TABLE atributo ADD CONSTRAINT FK_atributo_tipoAtributo
	FOREIGN KEY (idTipoAtributo) REFERENCES tipoAtributo (id)
;

ALTER TABLE operador ADD CONSTRAINT FK_operador_tipoAtributo
	FOREIGN KEY (idTipoAtributo) REFERENCES tipoAtributo (id)
;

ALTER TABLE regla ADD CONSTRAINT FK_regla_entidad
	FOREIGN KEY (idEntidad) REFERENCES entidad (id)
;

ALTER TABLE regla ADD CONSTRAINT FK_regla_atributo
	FOREIGN KEY (idAtributo) REFERENCES atributo (id)
;

ALTER TABLE regla ADD CONSTRAINT FK_regla_operador
	FOREIGN KEY (idOperador) REFERENCES operador (id)
;

ALTER TABLE regla ADD CONSTRAINT FK_regla_usuario
	FOREIGN KEY (idUsuario) REFERENCES usuario (id)
;

ALTER TABLE entidadReferenciada ADD CONSTRAINT FK_entidadReferenciada_entidad
	FOREIGN KEY (idEntidad) REFERENCES entidad (id)
;

ALTER TABLE entidadReferenciada ADD CONSTRAINT FK_entidadReferenciada_entidadReferenciada
	FOREIGN KEY (idEntidadReferenciada) REFERENCES entidad (id)
;
